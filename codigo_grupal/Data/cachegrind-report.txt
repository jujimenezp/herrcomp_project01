--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         6291456 B, 64 B, 12-way associative
Command:          ./valgrind.x
Data file:        cachegrind.out.10645
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     I1mr           ILmr           Dr                     D1mr            DLmr           Dw                   D1mw           DLmw           
--------------------------------------------------------------------------------
8,343,664,718 (100.0%) 5,912 (100.0%) 2,050 (100.0%) 1,797,008,614 (100.0%) 16,244 (100.0%) 8,452 (100.0%) 853,685,157 (100.0%) 7,583 (100.0%) 1,850 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                     I1mr         ILmr         Dr                   D1mr           DLmr           Dw                   D1mw           DLmw          file:function
--------------------------------------------------------------------------------
2,250,906,161 (26.98%)   7 ( 0.12%)   6 ( 0.29%) 300,288,663 (16.71%)    54 ( 0.33%)     0          120,000,099 (14.06%)     0            0           /usr/include/c++/9.2.0/bits/random.tcc:std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>::operator()()
2,220,000,111 (26.61%) 401 ( 6.78%)   2 ( 0.10%) 600,000,030 (33.39%)     0              0          420,000,021 (49.20%)     0            0           /usr/include/c++/9.2.0/bits/uniform_int_dist.h:int std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(std::mersenne_twister_engine<unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>&, std::uniform_int_distribution<int>::param_type const&)
1,416,592,356 (16.98%)   3 ( 0.05%)   3 ( 0.15%) 398,919,525 (22.20%)    52 ( 0.32%)     0           40,000,002 ( 4.69%)     0            0           /home/live/Documents/Proyecto_1/codigo_grupal/Programs/class_particle.cpp:Particle::Move(int const&, int const&, CONFIG const&, std::vector<int, std::allocator<int> >&)
  822,273,390 ( 9.86%)   8 ( 0.14%)   7 ( 0.34%) 193,116,996 (10.75%)   109 ( 0.67%)    34 ( 0.40%)           0              0            0           ???:__ieee754_log_fma
  321,600,091 ( 3.85%)   8 ( 0.14%)   8 ( 0.39%)  40,000,010 ( 2.23%)     1 ( 0.01%)     0           60,600,026 ( 7.10%)     2 ( 0.03%)   0           /home/live/Documents/Proyecto_1/codigo_grupal/Programs/main.cpp:main
  260,000,017 ( 3.12%)   1 ( 0.02%)   1 ( 0.05%)           0              0              0           60,000,006 ( 7.03%)     0            0           /usr/include/c++/9.2.0/bits/uniform_int_dist.h:main
  256,296,606 ( 3.07%)   3 ( 0.05%)   3 ( 0.15%)  59,341,818 ( 3.30%)     4 ( 0.02%)     0           19,470,858 ( 2.28%)     0            0           /home/live/Documents/Proyecto_1/codigo_grupal/Programs/entropy.cpp:entropy(CONFIG const&, std::vector<int, std::allocator<int> > const&)
  128,301,361 ( 1.54%) 853 (14.43%)  55 ( 2.68%)  27,697,152 ( 1.54%)     5 ( 0.03%)     3 ( 0.04%)  18,444,616 ( 2.16%)    12 ( 0.16%)   2 ( 0.11%)  ???:__printf_fp_l
   77,658,980 ( 0.93%) 331 ( 5.60%) 239 (11.66%)  49,058,477 ( 2.73%)   696 ( 4.28%)    12 ( 0.14%)   5,691,894 ( 0.67%)    24 ( 0.32%)  14 ( 0.76%)  ???:???
   76,283,424 ( 0.91%)   1 ( 0.02%)   1 ( 0.05%)           0              0              0                    0              0            0           ???:log@@GLIBC_2.29
   57,412,569 ( 0.69%)   0            0              200,001 ( 0.01%)     0              0           38,141,712 ( 4.47%)     0            0           /usr/include/c++/9.2.0/cmath:entropy(CONFIG const&, std::vector<int, std::allocator<int> > const&)
   55,600,278 ( 0.67%) 428 ( 7.24%)  29 ( 1.41%)  12,800,064 ( 0.71%)    14 ( 0.09%)     5 ( 0.06%)  11,000,055 ( 1.29%)     1 ( 0.01%)   0           ???:__vfprintf_internal
   40,000,037 ( 0.48%)   5 ( 0.08%)   4 ( 0.20%)  20,000,005 ( 1.11%)     0              0                   10 ( 0.00%)     2 ( 0.03%)   0           /usr/include/c++/9.2.0/bits/stl_vector.h:main
   35,353,724 ( 0.42%)   6 ( 0.10%)   6 ( 0.29%)   9,640,441 ( 0.54%)     3 ( 0.02%)     0            4,019,204 ( 0.47%)     0            0           ???:std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long)
   35,000,175 ( 0.42%)   3 ( 0.05%)   3 ( 0.15%)  11,200,056 ( 0.62%)     0              0            5,600,028 ( 0.66%)     0            0           ???:hack_digit
   28,000,140 ( 0.34%)   3 ( 0.05%)   3 ( 0.15%)   4,200,021 ( 0.23%)     0              0            2,800,014 ( 0.33%)     0            0           ???:__mpn_mul_1
   27,295,441 ( 0.33%)   4 ( 0.07%)   3 ( 0.15%)   7,225,269 ( 0.40%)     0              0            4,816,838 ( 0.56%)     0            0           ???:std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long)
   26,000,130 ( 0.31%)  10 ( 0.17%)  10 ( 0.49%)   5,800,029 ( 0.32%)     0              0            5,800,029 ( 0.68%)     0            0           ???:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const
   18,149,849 ( 0.22%) 229 ( 3.87%)   7 ( 0.34%)   4,234,424 ( 0.24%)     4 ( 0.02%)     0            3,630,424 ( 0.43%)     0            0           ???:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const
   18,072,090 ( 0.22%)   6 ( 0.10%)   4 ( 0.20%)   6,425,632 ( 0.36%)     0              0            4,417,622 ( 0.52%)     0            0           ???:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)
   17,043,978 ( 0.20%)   5 ( 0.08%)   4 ( 0.20%)   3,006,460 ( 0.17%)     1 ( 0.01%)     1 ( 0.01%)   1,803,642 ( 0.21%) 4,772 (62.93%) 128 ( 6.92%)  ???:__memcpy_avx_unaligned_erms
   16,867,284 ( 0.20%)   3 ( 0.05%)   3 ( 0.15%)   5,622,428 ( 0.31%)     0              0            4,016,020 ( 0.47%)     0            0           ???:std::ostream::sentry::sentry(std::ostream&)
   11,401,425 ( 0.14%) 408 ( 6.90%)   6 ( 0.29%)   4,000,500 ( 0.22%)    12 ( 0.07%)     1 ( 0.01%)   3,000,375 ( 0.35%)     0            0           ???:__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const
   10,000,050 ( 0.12%)   4 ( 0.07%)   4 ( 0.20%)   2,000,010 ( 0.11%)     0              0            2,800,014 ( 0.33%)     0            0           ???:__vsnprintf_internal
    9,273,682 ( 0.11%)   9 ( 0.15%)   5 ( 0.24%)   3,225,628 ( 0.18%)     0              0            1,814,415 ( 0.21%)     0            0           ???:std::ostream& std::ostream::_M_insert<long>(long)
    9,204,830 ( 0.11%)   4 ( 0.07%)   4 ( 0.20%)   3,201,680 ( 0.18%)    41 ( 0.25%)     0            2,001,050 ( 0.23%)     0            0           ???:__dynamic_cast
    8,800,044 ( 0.11%)   3 ( 0.05%)   3 ( 0.15%)   3,200,016 ( 0.18%)     1 ( 0.01%)     0            1,800,009 ( 0.21%)     0            0           ???:std::ostream& std::ostream::_M_insert<double>(double)
    8,400,084 ( 0.10%)   4 ( 0.07%)   2 ( 0.10%)   3,600,036 ( 0.20%)     9 ( 0.06%)     0            1,600,016 ( 0.19%)     0            0           ???:uselocale

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/live/Documents/Proyecto_1/codigo_grupal/Programs/main.cpp
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                  D1mr       DLmr       Dw                  D1mw       DLmw       

          .          .          .                   .          .          .                   .          .          .           #include "header.h"
          .          .          .                   .          .          .                   .          .          .           
          .          .          .                   .          .          .                   .          .          .           int main(void)
          4 ( 0.00%) 1 ( 0.02%) 1 ( 0.05%)          0          0          0                   3 ( 0.00%) 0          0           {
          .          .          .                   .          .          .                   .          .          .           
          3 ( 0.00%) 0          0                   0          0          0                   2 ( 0.00%) 1 ( 0.01%) 0             CONFIG config;
          7 ( 0.00%) 1 ( 0.02%) 1 ( 0.05%)          0          0          0                   2 ( 0.00%) 1 ( 0.01%) 0             config.read("Data/init_data.txt");
          .          .          .                   .          .          .                   .          .          .           
          1 ( 0.00%) 0          0                   1 ( 0.00%) 0          0                   0          0          0             Vec_p Particles(config.nmolecules);
          4 ( 0.00%) 0          0                   1 ( 0.00%) 0          0                   0          0          0             Vec_i Cells(config.gridsize*config.gridsize,0);
          .          .          .                   .          .          .                   .          .          .             
          4 ( 0.00%) 0          0                   0          0          0                   1 ( 0.00%) 0          0             start(config, Cells, Particles);
          .          .          .                   .          .          .                   .          .          .           
         10 ( 0.00%) 1 ( 0.02%) 1 ( 0.05%)          0          0          0                   3 ( 0.00%) 0          0             print_particles(Particles, "Data/data_particles_start.txt");
          .          .          .                   .          .          .                   .          .          .           
          .          .          .                   .          .          .                   .          .          .             std::mt19937 gen(config.seed);
          .          .          .                   .          .          .                   .          .          .             std::uniform_int_distribution<int> dis_move(0, 1);
          2 ( 0.00%) 0          0                   1 ( 0.00%) 0          0                   0          0          0             std::uniform_int_distribution<int> dis_particle(0,config.nmolecules-1);
          .          .          .                   .          .          .                   .          .          .             
          .          .          .                   .          .          .                   .          .          .             double Entropy = 0;
          2 ( 0.00%) 0          0                   0          0          0                   2 ( 0.00%) 0          0             int random_particle = 0, step = 0, direction = 0;
          .          .          .                   .          .          .                   .          .          .           
          .          .          .                   .          .          .                   .          .          .             
          4 ( 0.00%) 0          0                   0          0          0                   2 ( 0.00%) 0          0             std::ofstream entrofile;   //Salida de entropia
          4 ( 0.00%) 0          0                   0          0          0                   1 ( 0.00%) 0          0             entrofile.open("Data/data_entropy.txt");
          .          .          .                   .          .          .                   .          .          .             
 60,000,007 ( 0.72%) 1 ( 0.02%) 1 ( 0.05%) 20,000,002 ( 1.11%) 0          0                   0          0          0             for(int t = 0; t <= config.tmax; t++ ){
          .          .          .                   .          .          .                   .          .          .           
          .          .          .                   .          .          .                   .          .          .               random_particle = dis_particle(gen);        //Escoge una particula al azar
 40,000,002 ( 0.48%) 0          0                   0          0          0          20,000,001 ( 2.34%) 0          0               step = dis_move(gen)*2 - 1;    //Genera un numero aleatorio 1 o -1 (1: arriba o derecha -1:abajo o izquierda)
 20,000,001 ( 0.24%) 1 ( 0.02%) 1 ( 0.05%)          0          0          0          20,000,001 ( 2.34%) 0          0               direction = dis_move(gen);           //Genera un numero aleatorio 0 o 1 (0 para x 1 para y)
          .          .          .                   .          .          .                   .          .          .           
100,000,005 ( 1.20%) 0          0                   0          0          0          20,000,001 ( 2.34%) 0          0               Particles[random_particle].Move(step, direction, config, Cells);
          .          .          .                   .          .          .                   .          .          .           
100,000,005 ( 1.20%) 0          0          20,000,001 ( 1.11%) 0          0                   0          0          0               if (t%config.resolution == 0){
          .          .          .                   .          .          .                   .          .          .                   
    800,004 ( 0.01%) 1 ( 0.02%) 1 ( 0.05%)          0          0          0             400,002 ( 0.05%) 0          0                 Entropy = entropy(config, Cells);
    800,004 ( 0.01%) 0          0                   0          0          0             200,001 ( 0.02%) 0          0                 entrofile << t << "\t"
          .          .          .                   .          .          .                   .          .          .                           << Entropy
          .          .          .                   .          .          .                   .          .          .                           << "\n";
          .          .          .                   .          .          .                   .          .          .               }
          .          .          .                   .          .          .                   .          .          .             }
          .          .          .                   .          .          .                   .          .          .             
          2 ( 0.00%) 0          0                   0          0          0                   1 ( 0.00%) 0          0             entrofile.close();
          .          .          .                   .          .          .                   .          .          .           
         10 ( 0.00%) 1 ( 0.02%) 1 ( 0.05%)          0          0          0                   3 ( 0.00%) 0          0             print_particles(Particles, "Data/data_particles_end.txt");
          .          .          .                   .          .          .                   .          .          .             
          .          .          .                   .          .          .                   .          .          .             return 0;
          8 ( 0.00%) 3 ( 0.05%) 2 ( 0.10%)          4 ( 0.00%) 1 ( 0.01%) 0                   0          0          0           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9.2.0/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                  D1mr       DLmr       Dw         D1mw       DLmw       

-- line 87 ----------------------------------------
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .                 struct _Vector_impl_data
         .          .          .                   .          .          .          .          .          .                 {
         .          .          .                   .          .          .          .          .          .           	pointer _M_start;
         .          .          .                   .          .          .          .          .          .           	pointer _M_finish;
         .          .          .                   .          .          .          .          .          .           	pointer _M_end_of_storage;
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .           	_Vector_impl_data() _GLIBCXX_NOEXCEPT
        13 ( 0.00%) 0          0                   0          0          0          8 ( 0.00%) 3 ( 0.04%) 0           	: _M_start(), _M_finish(), _M_end_of_storage()
         .          .          .                   .          .          .          .          .          .           	{ }
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .           #if __cplusplus >= 201103L
         .          .          .                   .          .          .          .          .          .           	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
         .          .          .                   .          .          .          .          .          .           	: _M_start(__x._M_start), _M_finish(__x._M_finish),
         .          .          .                   .          .          .          .          .          .           	  _M_end_of_storage(__x._M_end_of_storage)
         .          .          .                   .          .          .          .          .          .           	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
         .          .          .                   .          .          .          .          .          .           #endif
-- line 103 ----------------------------------------
-- line 335 ----------------------------------------
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .               public:
         .          .          .                   .          .          .          .          .          .                 _Vector_impl _M_impl;
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .                 pointer
         .          .          .                   .          .          .          .          .          .                 _M_allocate(size_t __n)
         .          .          .                   .          .          .          .          .          .                 {
         .          .          .                   .          .          .          .          .          .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
        11 ( 0.00%) 0          0                   0          0          0          0          0          0           	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
         .          .          .                   .          .          .          .          .          .                 }
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .                 void
         .          .          .                   .          .          .          .          .          .                 _M_deallocate(pointer __p, size_t __n)
         .          .          .                   .          .          .          .          .          .                 {
         .          .          .                   .          .          .          .          .          .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
         8 ( 0.00%) 1 ( 0.02%) 1 ( 0.05%)          0          0          0          0          0          0           	if (__p)
         .          .          .                   .          .          .          .          .          .           	  _Tr::deallocate(_M_impl, __p, __n);
         .          .          .                   .          .          .          .          .          .                 }
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .               protected:
         .          .          .                   .          .          .          .          .          .                 void
         .          .          .                   .          .          .          .          .          .                 _M_create_storage(size_t __n)
         .          .          .                   .          .          .          .          .          .                 {
         8 ( 0.00%) 0          0                   0          0          0          4 ( 0.00%) 0          0           	this->_M_impl._M_start = this->_M_allocate(__n);
         .          .          .                   .          .          .          .          .          .           	this->_M_impl._M_finish = this->_M_impl._M_start;
         8 ( 0.00%) 2 ( 0.03%) 2 ( 0.10%)          0          0          0          4 ( 0.00%) 0          0           	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
         .          .          .                   .          .          .          .          .          .                 }
         .          .          .                   .          .          .          .          .          .               };
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .             /**
         .          .          .                   .          .          .          .          .          .              *  @brief A standard container which offers fixed time access to
         .          .          .                   .          .          .          .          .          .              *  individual elements in any order.
         .          .          .                   .          .          .          .          .          .              *
         .          .          .                   .          .          .          .          .          .              *  @ingroup sequences
-- line 368 ----------------------------------------
-- line 542 ----------------------------------------
         .          .          .                   .          .          .          .          .          .                  *
         .          .          .                   .          .          .          .          .          .                  *  All the elements of @a __x are copied, but any unused capacity in
         .          .          .                   .          .          .          .          .          .                  *  @a __x  will not be copied
         .          .          .                   .          .          .          .          .          .                  *  (i.e. capacity() == size() in the new %vector).
         .          .          .                   .          .          .          .          .          .                  *
         .          .          .                   .          .          .          .          .          .                  *  The newly-created %vector uses a copy of the allocator object used
         .          .          .                   .          .          .          .          .          .                  *  by @a __x (unless the allocator traits dictate a different object).
         .          .          .                   .          .          .          .          .          .                  */
        10 ( 0.00%) 2 ( 0.03%) 1 ( 0.05%)          0          0          0          6 ( 0.00%) 0          0                 vector(const vector& __x)
         .          .          .                   .          .          .          .          .          .                 : _Base(__x.size(),
         .          .          .                   .          .          .          .          .          .           	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
         .          .          .                   .          .          .          .          .          .                 {
         2 ( 0.00%) 0          0                   0          0          0          2 ( 0.00%) 0          0           	this->_M_impl._M_finish =
         4 ( 0.00%) 0          0                   4 ( 0.00%) 0          0          0          0          0           	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
         .          .          .                   .          .          .          .          .          .           				      this->_M_impl._M_start,
         .          .          .                   .          .          .          .          .          .           				      _M_get_Tp_allocator());
         8 ( 0.00%) 0          0                   8 ( 0.00%) 0          0          0          0          0                 }
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .           #if __cplusplus >= 201103L
         .          .          .                   .          .          .          .          .          .                 /**
         .          .          .                   .          .          .          .          .          .                  *  @brief  %Vector move constructor.
         .          .          .                   .          .          .          .          .          .                  *
         .          .          .                   .          .          .          .          .          .                  *  The newly-created %vector contains the exact contents of the
         .          .          .                   .          .          .          .          .          .                  *  moved instance.
         .          .          .                   .          .          .          .          .          .                  *  The contents of the moved instance are a valid, but unspecified
-- line 566 ----------------------------------------
-- line 669 ----------------------------------------
         .          .          .                   .          .          .          .          .          .                 /**
         .          .          .                   .          .          .          .          .          .                  *  The dtor only erases the elements, and note that if the
         .          .          .                   .          .          .          .          .          .                  *  elements themselves are pointers, the pointed-to memory is
         .          .          .                   .          .          .          .          .          .                  *  not touched in any way.  Managing the pointer is the user's
         .          .          .                   .          .          .          .          .          .                  *  responsibility.
         .          .          .                   .          .          .          .          .          .                  */
         .          .          .                   .          .          .          .          .          .                 ~vector() _GLIBCXX_NOEXCEPT
         .          .          .                   .          .          .          .          .          .                 {
         4 ( 0.00%) 1 ( 0.02%) 0                   4 ( 0.00%) 0          0          0          0          0           	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         .          .          .                   .          .          .          .          .          .           		      _M_get_Tp_allocator());
         .          .          .                   .          .          .          .          .          .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
         .          .          .                   .          .          .          .          .          .                 }
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .                 /**
         .          .          .                   .          .          .          .          .          .                  *  @brief  %Vector assignment operator.
         .          .          .                   .          .          .          .          .          .                  *  @param  __x  A %vector of identical element and allocator types.
         .          .          .                   .          .          .          .          .          .                  *
-- line 685 ----------------------------------------
-- line 908 ----------------------------------------
         .          .          .                   .          .          .          .          .          .                 crend() const noexcept
         .          .          .                   .          .          .          .          .          .                 { return const_reverse_iterator(begin()); }
         .          .          .                   .          .          .          .          .          .           #endif
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .                 // [23.2.4.2] capacity
         .          .          .                   .          .          .          .          .          .                 /**  Returns the number of elements in the %vector.  */
         .          .          .                   .          .          .          .          .          .                 size_type
         .          .          .                   .          .          .          .          .          .                 size() const _GLIBCXX_NOEXCEPT
         4 ( 0.00%) 0          0                   4 ( 0.00%) 0          0          0          0          0                 { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .                 /**  Returns the size() of the largest possible %vector.  */
         .          .          .                   .          .          .          .          .          .                 size_type
         .          .          .                   .          .          .          .          .          .                 max_size() const _GLIBCXX_NOEXCEPT
         .          .          .                   .          .          .          .          .          .                 { return _S_max_size(_M_get_Tp_allocator()); }
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .           #if __cplusplus >= 201103L
         .          .          .                   .          .          .          .          .          .                 /**
-- line 924 ----------------------------------------
-- line 1035 ----------------------------------------
         .          .          .                   .          .          .          .          .          .                  *  Note that data access with this operator is unchecked and
         .          .          .                   .          .          .          .          .          .                  *  out_of_range lookups are not defined. (For checked lookups
         .          .          .                   .          .          .          .          .          .                  *  see at().)
         .          .          .                   .          .          .          .          .          .                  */
         .          .          .                   .          .          .          .          .          .                 reference
         .          .          .                   .          .          .          .          .          .                 operator[](size_type __n) _GLIBCXX_NOEXCEPT
         .          .          .                   .          .          .          .          .          .                 {
         .          .          .                   .          .          .          .          .          .           	__glibcxx_requires_subscript(__n);
40,001,602 ( 0.48%) 0          0          20,000,801 ( 1.11%) 0          0          0          0          0           	return *(this->_M_impl._M_start + __n);
         .          .          .                   .          .          .          .          .          .                 }
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .                 /**
         .          .          .                   .          .          .          .          .          .                  *  @brief  Subscript access to the data contained in the %vector.
         .          .          .                   .          .          .          .          .          .                  *  @param __n The index of the element for which data should be
         .          .          .                   .          .          .          .          .          .                  *  accessed.
         .          .          .                   .          .          .          .          .          .                  *  @return  Read-only (constant) reference to data.
         .          .          .                   .          .          .          .          .          .                  *
-- line 1051 ----------------------------------------
-- line 1584 ----------------------------------------
         .          .          .                   .          .          .          .          .          .           					_M_get_Tp_allocator());
         .          .          .                   .          .          .          .          .          .           	}
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .                 // Called by the first initialize_dispatch above and by the
         .          .          .                   .          .          .          .          .          .                 // vector(n,value,a) constructor.
         .          .          .                   .          .          .          .          .          .                 void
         .          .          .                   .          .          .          .          .          .                 _M_fill_initialize(size_type __n, const value_type& __value)
         .          .          .                   .          .          .          .          .          .                 {
         1 ( 0.00%) 0          0                   0          0          0          1 ( 0.00%) 0          0           	this->_M_impl._M_finish =
         .          .          .                   .          .          .          .          .          .           	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
         .          .          .                   .          .          .          .          .          .           					_M_get_Tp_allocator());
         .          .          .                   .          .          .          .          .          .                 }
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .           #if __cplusplus >= 201103L
         .          .          .                   .          .          .          .          .          .                 // Called by the vector(n) constructor.
         .          .          .                   .          .          .          .          .          .                 void
         .          .          .                   .          .          .          .          .          .                 _M_default_initialize(size_type __n)
         .          .          .                   .          .          .          .          .          .                 {
         1 ( 0.00%) 0          0                   0          0          0          1 ( 0.00%) 0          0           	this->_M_impl._M_finish =
         .          .          .                   .          .          .          .          .          .           	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
         .          .          .                   .          .          .          .          .          .           					   _M_get_Tp_allocator());
         .          .          .                   .          .          .          .          .          .                 }
         .          .          .                   .          .          .          .          .          .           #endif
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .                 // Internal assign functions follow.  The *_aux functions do the actual
         .          .          .                   .          .          .          .          .          .                 // assignment work for the range versions.
         .          .          .                   .          .          .          .          .          .           
-- line 1610 ----------------------------------------
-- line 1758 ----------------------------------------
         .          .          .                   .          .          .          .          .          .           	const size_type __len = size() + (std::max)(size(), __n);
         .          .          .                   .          .          .          .          .          .           	return (__len < size() || __len > max_size()) ? max_size() : __len;
         .          .          .                   .          .          .          .          .          .                 }
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .                 // Called by constructors to check initial size.
         .          .          .                   .          .          .          .          .          .                 static size_type
         .          .          .                   .          .          .          .          .          .                 _S_check_init_len(size_type __n, const allocator_type& __a)
         .          .          .                   .          .          .          .          .          .                 {
         3 ( 0.00%) 1 ( 0.02%) 1 ( 0.05%)          0          0          0          0          0          0           	if (__n > _S_max_size(_Tp_alloc_type(__a)))
         .          .          .                   .          .          .          .          .          .           	  __throw_length_error(
         .          .          .                   .          .          .          .          .          .           	      __N("cannot create std::vector larger than max_size()"));
         .          .          .                   .          .          .          .          .          .           	return __n;
         .          .          .                   .          .          .          .          .          .                 }
         .          .          .                   .          .          .          .          .          .           
         .          .          .                   .          .          .          .          .          .                 static size_type
         .          .          .                   .          .          .          .          .          .                 _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
         .          .          .                   .          .          .          .          .          .                 {
-- line 1774 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9.2.0/bits/uniform_int_dist.h
--------------------------------------------------------------------------------
Ir                   I1mr         ILmr       Dr                   D1mr       DLmr       Dw                   D1mw       DLmw       

-- line 68 ----------------------------------------
          .            .          .                    .          .          .                    .          .          .                 {
          .            .          .                    .          .          .                    .          .          .           	typedef uniform_int_distribution<_IntType> distribution_type;
          .            .          .                    .          .          .                    .          .          .           
          .            .          .                    .          .          .                    .          .          .           	param_type() : param_type(0) { }
          .            .          .                    .          .          .                    .          .          .           
          .            .          .                    .          .          .                    .          .          .           	explicit
          .            .          .                    .          .          .                    .          .          .           	param_type(_IntType __a,
          .            .          .                    .          .          .                    .          .          .           		   _IntType __b = numeric_limits<_IntType>::max())
          4 ( 0.00%)   0          0                    0          0          0                    3 ( 0.00%) 0          0           	: _M_a(__a), _M_b(__b)
          .            .          .                    .          .          .                    .          .          .           	{
          .            .          .                    .          .          .                    .          .          .           	  __glibcxx_assert(_M_a <= _M_b);
          .            .          .                    .          .          .                    .          .          .           	}
          .            .          .                    .          .          .                    .          .          .           
          .            .          .                    .          .          .                    .          .          .           	result_type
          .            .          .                    .          .          .                    .          .          .           	a() const
          .            .          .                    .          .          .                    .          .          .           	{ return _M_a; }
          .            .          .                    .          .          .                    .          .          .           
-- line 84 ----------------------------------------
-- line 165 ----------------------------------------
          .            .          .                    .          .          .                    .          .          .                 { return this->b(); }
          .            .          .                    .          .          .                    .          .          .           
          .            .          .                    .          .          .                    .          .          .                 /**
          .            .          .                    .          .          .                    .          .          .                  * @brief Generating functions.
          .            .          .                    .          .          .                    .          .          .                  */
          .            .          .                    .          .          .                    .          .          .                 template<typename _UniformRandomNumberGenerator>
          .            .          .                    .          .          .                    .          .          .           	result_type
          .            .          .                    .          .          .                    .          .          .           	operator()(_UniformRandomNumberGenerator& __urng)
260,000,013 ( 3.12%)   1 ( 0.02%) 1 ( 0.05%)           0          0          0           60,000,003 ( 7.03%) 0          0                   { return this->operator()(__urng, _M_param); }
          .            .          .                    .          .          .                    .          .          .           
          .            .          .                    .          .          .                    .          .          .                 template<typename _UniformRandomNumberGenerator>
          .            .          .                    .          .          .                    .          .          .           	result_type
          .            .          .                    .          .          .                    .          .          .           	operator()(_UniformRandomNumberGenerator& __urng,
          .            .          .                    .          .          .                    .          .          .           		   const param_type& __p);
          .            .          .                    .          .          .                    .          .          .           
          .            .          .                    .          .          .                    .          .          .                 template<typename _ForwardIterator,
          .            .          .                    .          .          .                    .          .          .           	       typename _UniformRandomNumberGenerator>
-- line 181 ----------------------------------------
-- line 217 ----------------------------------------
          .            .          .                    .          .          .                    .          .          .           			const param_type& __p);
          .            .          .                    .          .          .                    .          .          .           
          .            .          .                    .          .          .                    .          .          .                 param_type _M_param;
          .            .          .                    .          .          .                    .          .          .               };
          .            .          .                    .          .          .                    .          .          .           
          .            .          .                    .          .          .                    .          .          .             template<typename _IntType>
          .            .          .                    .          .          .                    .          .          .               template<typename _UniformRandomNumberGenerator>
          .            .          .                    .          .          .                    .          .          .                 typename uniform_int_distribution<_IntType>::result_type
540,000,027 ( 6.47%) 400 ( 6.77%) 1 ( 0.05%)           0          0          0          360,000,018 (42.17%) 0          0                 uniform_int_distribution<_IntType>::
          .            .          .                    .          .          .                    .          .          .                 operator()(_UniformRandomNumberGenerator& __urng,
          .            .          .                    .          .          .                    .          .          .           		 const param_type& __param)
          .            .          .                    .          .          .                    .          .          .                 {
          .            .          .                    .          .          .                    .          .          .           	typedef typename _UniformRandomNumberGenerator::result_type
          .            .          .                    .          .          .                    .          .          .           	  _Gresult_type;
          .            .          .                    .          .          .                    .          .          .           	typedef typename std::make_unsigned<result_type>::type __utype;
          .            .          .                    .          .          .                    .          .          .           	typedef typename std::common_type<_Gresult_type, __utype>::type
          .            .          .                    .          .          .                    .          .          .           	  __uctype;
          .            .          .                    .          .          .                    .          .          .           
          .            .          .                    .          .          .                    .          .          .           	const __uctype __urngmin = __urng.min();
          .            .          .                    .          .          .                    .          .          .           	const __uctype __urngmax = __urng.max();
          .            .          .                    .          .          .                    .          .          .           	const __uctype __urngrange = __urngmax - __urngmin;
 60,000,003 ( 0.72%)   0          0                    0          0          0                    0          0          0           	const __uctype __urange
120,000,006 ( 1.44%)   0          0          120,000,006 ( 6.68%) 0          0                    0          0          0           	  = __uctype(__param.b()) - __uctype(__param.a());
          .            .          .                    .          .          .                    .          .          .           
          .            .          .                    .          .          .                    .          .          .           	__uctype __ret;
          .            .          .                    .          .          .                    .          .          .           
180,000,009 ( 2.16%)   0          0                    0          0          0                    0          0          0           	if (__urngrange > __urange)
          .            .          .                    .          .          .                    .          .          .           	  {
          .            .          .                    .          .          .                    .          .          .           	    // downscaling
 60,000,003 ( 0.72%)   0          0                    0          0          0                    0          0          0           	    const __uctype __uerange = __urange + 1; // __urange can be zero
300,000,015 ( 3.60%)   0          0                    0          0          0                    0          0          0           	    const __uctype __scaling = __urngrange / __uerange;
 60,000,003 ( 0.72%)   0          0                    0          0          0                    0          0          0           	    const __uctype __past = __uerange * __scaling;
          .            .          .                    .          .          .                    .          .          .           	    do
120,000,006 ( 1.44%)   1 ( 0.02%) 1 ( 0.05%)           0          0          0           60,000,003 ( 7.03%) 0          0           	      __ret = __uctype(__urng()) - __urngmin;
120,000,006 ( 1.44%)   0          0                    0          0          0                    0          0          0           	    while (__ret >= __past);
120,000,006 ( 1.44%)   0          0                    0          0          0                    0          0          0           	    __ret /= __scaling;
          .            .          .                    .          .          .                    .          .          .           	  }
          .            .          .                    .          .          .                    .          .          .           	else if (__urngrange < __urange)
          .            .          .                    .          .          .                    .          .          .           	  {
          .            .          .                    .          .          .                    .          .          .           	    // upscaling
          .            .          .                    .          .          .                    .          .          .           	    /*
          .            .          .                    .          .          .                    .          .          .           	      Note that every value in [0, urange]
          .            .          .                    .          .          .                    .          .          .           	      can be written uniquely as
          .            .          .                    .          .          .                    .          .          .           
-- line 260 ----------------------------------------
-- line 276 ----------------------------------------
          .            .          .                    .          .          .                    .          .          .           			 (__urng, param_type(0, __urange / __uerngrange)));
          .            .          .                    .          .          .                    .          .          .           		__ret = __tmp + (__uctype(__urng()) - __urngmin);
          .            .          .                    .          .          .                    .          .          .           	      }
          .            .          .                    .          .          .                    .          .          .           	    while (__ret > __urange || __ret < __tmp);
          .            .          .                    .          .          .                    .          .          .           	  }
          .            .          .                    .          .          .                    .          .          .           	else
          .            .          .                    .          .          .                    .          .          .           	  __ret = __uctype(__urng()) - __urngmin;
          .            .          .                    .          .          .                    .          .          .           
 60,000,003 ( 0.72%)   0          0           60,000,003 ( 3.34%) 0          0                    0          0          0           	return __ret + __param.a();
480,000,024 ( 5.75%)   0          0          420,000,021 (23.37%) 0          0                    0          0          0                 }
          .            .          .                    .          .          .                    .          .          .           
          .            .          .                    .          .          .                    .          .          .           
          .            .          .                    .          .          .                    .          .          .             template<typename _IntType>
          .            .          .                    .          .          .                    .          .          .               template<typename _ForwardIterator,
          .            .          .                    .          .          .                    .          .          .           	     typename _UniformRandomNumberGenerator>
          .            .          .                    .          .          .                    .          .          .                 void
          .            .          .                    .          .          .                    .          .          .                 uniform_int_distribution<_IntType>::
          .            .          .                    .          .          .                    .          .          .                 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
-- line 293 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9.2.0/bits/random.tcc
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                  D1mr        DLmr       Dw                  D1mw        DLmw       

-- line 321 ----------------------------------------
          .          .          .                   .           .          .                   .           .          .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
          .          .          .                   .           .          .                   .           .          .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
          .          .          .                   .           .          .                   .           .          .           	   _UIntType __f>
          .          .          .                   .           .          .                   .           .          .               void
          .          .          .                   .           .          .                   .           .          .               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
          .          .          .                   .           .          .                   .           .          .           			    __s, __b, __t, __c, __l, __f>::
          .          .          .                   .           .          .                   .           .          .               seed(result_type __sd)
          .          .          .                   .           .          .                   .           .          .               {
          1 ( 0.00%) 0          0                   0           0          0                   1 ( 0.00%)  0          0                 _M_x[0] = __detail::__mod<_UIntType,
          .          .          .                   .           .          .                   .           .          .           	__detail::_Shift<_UIntType, __w>::__value>(__sd);
          .          .          .                   .           .          .                   .           .          .           
      1,871 ( 0.00%) 0          0                   0           0          0                   0           0          0                 for (size_t __i = 1; __i < state_size; ++__i)
          .          .          .                   .           .          .                   .           .          .           	{
          .          .          .                   .           .          .                   .           .          .           	  _UIntType __x = _M_x[__i - 1];
      1,869 ( 0.00%) 0          0                   0           0          0                   0           0          0           	  __x ^= __x >> (__w - 2);
        623 ( 0.00%) 1 ( 0.02%) 1 ( 0.05%)          0           0          0                   0           0          0           	  __x *= __f;
          .          .          .                   .           .          .                   .           .          .           	  __x += __detail::__mod<_UIntType, __n>(__i);
        623 ( 0.00%) 0          0                   0           0          0                 623 ( 0.00%) 77 ( 1.02%) 4 ( 0.22%)  	  _M_x[__i] = __detail::__mod<_UIntType,
          .          .          .                   .           .          .                   .           .          .           	    __detail::_Shift<_UIntType, __w>::__value>(__x);
          .          .          .                   .           .          .                   .           .          .           	}
          1 ( 0.00%) 1 ( 0.02%) 1 ( 0.05%)          0           0          0                   1 ( 0.00%)  1 ( 0.01%) 0                 _M_p = state_size;
          .          .          .                   .           .          .                   .           .          .               }
          .          .          .                   .           .          .                   .           .          .           
          .          .          .                   .           .          .                   .           .          .             template<typename _UIntType,
          .          .          .                   .           .          .                   .           .          .           	   size_t __w, size_t __n, size_t __m, size_t __r,
          .          .          .                   .           .          .                   .           .          .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
          .          .          .                   .           .          .                   .           .          .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
          .          .          .                   .           .          .                   .           .          .           	   _UIntType __f>
          .          .          .                   .           .          .                   .           .          .               template<typename _Sseq>
-- line 349 ----------------------------------------
-- line 395 ----------------------------------------
          .          .          .                   .           .          .                   .           .          .               void
          .          .          .                   .           .          .                   .           .          .               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
          .          .          .                   .           .          .                   .           .          .           			    __s, __b, __t, __c, __l, __f>::
          .          .          .                   .           .          .                   .           .          .               _M_gen_rand(void)
          .          .          .                   .           .          .                   .           .          .               {
          .          .          .                   .           .          .                   .           .          .                 const _UIntType __upper_mask = (~_UIntType()) << __r;
          .          .          .                   .           .          .                   .           .          .                 const _UIntType __lower_mask = ~__upper_mask;
          .          .          .                   .           .          .                   .           .          .           
 65,865,490 ( 0.79%) 0          0              96,154 ( 0.01%)  0          0                   0           0          0                 for (size_t __k = 0; __k < (__n - __m); ++__k)
          .          .          .                   .           .          .                   .           .          .                   {
 65,480,874 ( 0.78%) 0          0                   0           0          0                   0           0          0           	  _UIntType __y = ((_M_x[__k] & __upper_mask)
 65,480,874 ( 0.78%) 0          0          21,826,958 ( 1.21%) 22 ( 0.14%) 0                   0           0          0           			   | (_M_x[__k + 1] & __lower_mask));
 87,307,832 ( 1.05%) 1 ( 0.02%) 1 ( 0.05%) 21,826,958 ( 1.21%)  2 ( 0.01%) 0          21,826,958 ( 2.56%)  0          0           	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
 54,565,772 ( 0.65%) 0          0                   0           0          0                   0           0          0           		       ^ ((__y & 0x01) ? __a : 0));
          .          .          .                   .           .          .                   .           .          .                   }
          .          .          .                   .           .          .                   .           .          .           
114,230,952 ( 1.37%) 0          0                   0           0          0                   0           0          0                 for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
          .          .          .                   .           .          .                   .           .          .           	{
114,230,952 ( 1.37%) 0          0                   0           0          0                   0           0          0           	  _UIntType __y = ((_M_x[__k] & __upper_mask)
114,230,952 ( 1.37%) 1 ( 0.02%) 1 ( 0.05%) 38,076,984 ( 2.12%)  0          0                   0           0          0           			   | (_M_x[__k + 1] & __lower_mask));
152,307,936 ( 1.83%) 0          0          38,076,984 ( 2.12%)  0          0          38,076,984 ( 4.46%)  0          0           	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
 95,185,335 ( 1.14%) 0          0                   0           0          0                   0           0          0           		       ^ ((__y & 0x01) ? __a : 0));
          .          .          .                   .           .          .                   .           .          .           	}
          .          .          .                   .           .          .                   .           .          .           
    288,462 ( 0.00%) 0          0              96,154 ( 0.01%)  0          0                   0           0          0                 _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
    192,308 ( 0.00%) 1 ( 0.02%) 1 ( 0.05%)     96,154 ( 0.01%)  0          0                   0           0          0           		       | (_M_x[0] & __lower_mask));
    384,616 ( 0.00%) 0          0              96,154 ( 0.01%)  0          0              96,154 ( 0.01%)  0          0                 _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
    288,354 ( 0.00%) 0          0                   0           0          0                   0           0          0           		       ^ ((__y & 0x01) ? __a : 0));
          .          .          .                   .           .          .                   .           .          .                 _M_p = 0;
    288,462 ( 0.00%) 0          0                   0           0          0                   0           0          0               }
          .          .          .                   .           .          .                   .           .          .           
          .          .          .                   .           .          .                   .           .          .             template<typename _UIntType, size_t __w,
          .          .          .                   .           .          .                   .           .          .           	   size_t __n, size_t __m, size_t __r,
          .          .          .                   .           .          .                   .           .          .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
          .          .          .                   .           .          .                   .           .          .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
          .          .          .                   .           .          .                   .           .          .           	   _UIntType __f>
          .          .          .                   .           .          .                   .           .          .               void
          .          .          .                   .           .          .                   .           .          .               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
-- line 432 ----------------------------------------
-- line 449 ----------------------------------------
          .          .          .                   .           .          .                   .           .          .               typename
          .          .          .                   .           .          .                   .           .          .               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
          .          .          .                   .           .          .                   .           .          .           			    __s, __b, __t, __c, __l, __f>::result_type
          .          .          .                   .           .          .                   .           .          .               mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
          .          .          .                   .           .          .                   .           .          .           			    __s, __b, __t, __c, __l, __f>::
          .          .          .                   .           .          .                   .           .          .               operator()()
          .          .          .                   .           .          .                   .           .          .               {
          .          .          .                   .           .          .                   .           .          .                 // Reload the vector - cost is O(n) amortized over n calls.
240,288,474 ( 2.88%) 3 ( 0.05%) 2 ( 0.10%) 60,000,003 ( 3.34%)  0          0                   0           0          0                 if (_M_p >= state_size)
          .          .          .                   .           .          .                   .           .          .           	_M_gen_rand();
          .          .          .                   .           .          .                   .           .          .           
          .          .          .                   .           .          .                   .           .          .                 // Calculate o(x(i)).
120,000,006 ( 1.44%) 0          0          60,000,003 ( 3.34%) 30 ( 0.18%) 0          60,000,003 ( 7.03%)  0          0                 result_type __z = _M_x[_M_p++];
240,000,012 ( 2.88%) 0          0                   0           0          0                   0           0          0                 __z ^= (__z >> __u) & __d;
240,000,012 ( 2.88%) 0          0                   0           0          0                   0           0          0                 __z ^= (__z << __s) & __b;
240,000,012 ( 2.88%) 0          0                   0           0          0                   0           0          0                 __z ^= (__z << __t) & __c;
180,000,009 ( 2.16%) 0          0                   0           0          0                   0           0          0                 __z ^= (__z >> __l);
          .          .          .                   .           .          .                   .           .          .           
          .          .          .                   .           .          .                   .           .          .                 return __z;
 60,288,465 ( 0.72%) 1 ( 0.02%) 1 ( 0.05%) 60,096,157 ( 3.34%)  0          0                   0           0          0               }
          .          .          .                   .           .          .                   .           .          .           
          .          .          .                   .           .          .                   .           .          .             template<typename _UIntType, size_t __w,
          .          .          .                   .           .          .                   .           .          .           	   size_t __n, size_t __m, size_t __r,
          .          .          .                   .           .          .                   .           .          .           	   _UIntType __a, size_t __u, _UIntType __d, size_t __s,
          .          .          .                   .           .          .                   .           .          .           	   _UIntType __b, size_t __t, _UIntType __c, size_t __l,
          .          .          .                   .           .          .                   .           .          .           	   _UIntType __f, typename _CharT, typename _Traits>
          .          .          .                   .           .          .                   .           .          .               std::basic_ostream<_CharT, _Traits>&
          .          .          .                   .           .          .                   .           .          .               operator<<(std::basic_ostream<_CharT, _Traits>& __os,
-- line 476 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/9.2.0/cmath
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr               D1mr       DLmr       Dw                  D1mw       DLmw       

-- line 265 ----------------------------------------
         .          .          .                .          .          .                   .          .          .             { return __builtin_floorl(__x); }
         .          .          .                .          .          .                   .          .          .           #endif
         .          .          .                .          .          .                   .          .          .           
         .          .          .                .          .          .                   .          .          .             template<typename _Tp>
         .          .          .                .          .          .                   .          .          .               inline _GLIBCXX_CONSTEXPR
         .          .          .                .          .          .                   .          .          .               typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
         .          .          .                .          .          .                   .          .          .                                               double>::__type
         .          .          .                .          .          .                   .          .          .               floor(_Tp __x)
       800 ( 0.00%) 0          0                0          0          0                   0          0          0               { return __builtin_floor(__x); }
         .          .          .                .          .          .                   .          .          .           
         .          .          .                .          .          .                   .          .          .             using ::fmod;
         .          .          .                .          .          .                   .          .          .           
         .          .          .                .          .          .                   .          .          .           #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
         .          .          .                .          .          .                   .          .          .             inline _GLIBCXX_CONSTEXPR float
         .          .          .                .          .          .                   .          .          .             fmod(float __x, float __y)
         .          .          .                .          .          .                   .          .          .             { return __builtin_fmodf(__x, __y); }
         .          .          .                .          .          .                   .          .          .           
-- line 281 ----------------------------------------
-- line 343 ----------------------------------------
         .          .          .                .          .          .                   .          .          .             { return __builtin_logl(__x); }
         .          .          .                .          .          .                   .          .          .           #endif
         .          .          .                .          .          .                   .          .          .           
         .          .          .                .          .          .                   .          .          .             template<typename _Tp>
         .          .          .                .          .          .                   .          .          .               inline _GLIBCXX_CONSTEXPR
         .          .          .                .          .          .                   .          .          .               typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
         .          .          .                .          .          .                   .          .          .                                               double>::__type
         .          .          .                .          .          .                   .          .          .               log(_Tp __x)
57,412,569 ( 0.69%) 0          0          200,001 ( 0.01%) 0          0          38,141,712 ( 4.47%) 0          0               { return __builtin_log(__x); }
         .          .          .                .          .          .                   .          .          .           
         .          .          .                .          .          .                   .          .          .             using ::log10;
         .          .          .                .          .          .                   .          .          .           
         .          .          .                .          .          .                   .          .          .           #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
         .          .          .                .          .          .                   .          .          .             inline _GLIBCXX_CONSTEXPR float
         .          .          .                .          .          .                   .          .          .             log10(float __x)
         .          .          .                .          .          .                   .          .          .             { return __builtin_log10f(__x); }
         .          .          .                .          .          .                   .          .          .           
-- line 359 ----------------------------------------
-- line 467 ----------------------------------------
         .          .          .                .          .          .                   .          .          .             sqrt(long double __x)
         .          .          .                .          .          .                   .          .          .             { return __builtin_sqrtl(__x); }
         .          .          .                .          .          .                   .          .          .           #endif
         .          .          .                .          .          .                   .          .          .           
         .          .          .                .          .          .                   .          .          .             template<typename _Tp>
         .          .          .                .          .          .                   .          .          .               inline _GLIBCXX_CONSTEXPR
         .          .          .                .          .          .                   .          .          .               typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
         .          .          .                .          .          .                   .          .          .                                               double>::__type
         1 ( 0.00%) 0          0                0          0          0                   0          0          0               sqrt(_Tp __x)
        13 ( 0.00%) 0          0                0          0          0                   0          0          0               { return __builtin_sqrt(__x); }
         .          .          .                .          .          .                   .          .          .           
         .          .          .                .          .          .                   .          .          .             using ::tan;
         .          .          .                .          .          .                   .          .          .           
         .          .          .                .          .          .                   .          .          .           #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
         .          .          .                .          .          .                   .          .          .             inline _GLIBCXX_CONSTEXPR float
         .          .          .                .          .          .                   .          .          .             tan(float __x)
         .          .          .                .          .          .                   .          .          .             { return __builtin_tanf(__x); }
         .          .          .                .          .          .                   .          .          .           
-- line 484 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/live/Documents/Proyecto_1/codigo_grupal/Programs/class_particle.cpp
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                   D1mr        DLmr       Dw                  D1mw       DLmw       

          .          .          .                    .           .          .                   .          .          .           #include "header.h"
          .          .          .                    .           .          .                   .          .          .           
          .          .          .                    .           .          .                   .          .          .           int Particle::Getcell(const CONFIG &config){
          .          .          .                    .           .          .                   .          .          .           
358,508,348 ( 4.30%) 3 ( 0.05%) 3 ( 0.15%) 119,502,516 ( 6.65%)  0          0                   0          0          0               int X = (position[0] + config.latticesize/2)*config.gridsize/config.latticesize;
199,170,860 ( 2.39%) 0          0           39,834,172 ( 2.22%)  0          0                   0          0          0               int Y = (position[1] + config.latticesize/2)*config.gridsize/config.latticesize;
          .          .          .                    .           .          .                   .          .          .           
119,502,516 ( 1.43%) 1 ( 0.02%) 1 ( 0.05%)           0           0          0                   0          0          0               return X + Y*config.gridsize;
        400 ( 0.00%) 0          0                  400 ( 0.00%)  0          0                   0          0          0           }
          .          .          .                    .           .          .                   .          .          .           
          .          .          .                    .           .          .                   .          .          .           void Particle::Move(const int &step, const int &direction, const CONFIG &config, std::vector<int> &Cells)
 60,000,003 ( 0.72%) 0          0                    0           0          0          40,000,002 ( 4.69%) 0          0           {
480,000,024 ( 5.75%) 1 ( 0.02%) 1 ( 0.05%)  80,000,004 ( 4.45%) 52 ( 0.32%) 0                   0          0          0             if (labs(position[direction] + step) != config.latticesize/2 + (1 - step)/2){
          .          .          .                    .           .          .                   .          .          .               int m = Getcell(config);
 59,750,658 ( 0.72%) 0          0           39,833,772 ( 2.22%)  0          0                   0          0          0               Cells[m] -= 1; //delete it from the old cell
          .          .          .                    .           .          .                   .          .          .               
 39,833,772 ( 0.48%) 0          0           39,833,772 ( 2.22%)  0          0                   0          0          0               position[direction] += step; //move the particle
          .          .          .                    .           .          .                   .          .          .               
          .          .          .                    .           .          .                   .          .          .               m = Getcell(config);
 39,833,772 ( 0.48%) 0          0           19,916,886 ( 1.11%)  0          0                   0          0          0               Cells[m] += 1; //add it to the new cell
          .          .          .                    .           .          .                   .          .          .             } 
 60,000,003 ( 0.72%) 0          0           60,000,003 ( 3.34%)  0          0                   0          0          0           }
          .          .          .                    .           .          .                   .          .          .           
          .          .          .                    .           .          .                   .          .          .           void Particle::Move_hole(const int &step, const int &direction, const int &particle_id, const CONFIG &config, std::vector<int> &Cells, std::vector<Particle> &Particles)
          .          .          .                    .           .          .                   .          .          .           {
          .          .          .                    .           .          .                   .          .          .             int moved_particle_cell = Particles[particle_id].Getcell(config);
          .          .          .                    .           .          .                   .          .          .             
          .          .          .                    .           .          .                   .          .          .             if (labs(position[direction] + step) != config.latticesize/2 + (1 - step)/2){ //the particle is not on the limit after moving
          .          .          .                    .           .          .                   .          .          .               Cells[moved_particle_cell] -= 1; //delete it form old-cell count
          .          .          .                    .           .          .                   .          .          .               
-- line 30 ----------------------------------------
-- line 34 ----------------------------------------
          .          .          .                    .           .          .                   .          .          .               Cells[moved_particle_cell] += 1; //add it to new-cell count
          .          .          .                    .           .          .                   .          .          .             }
          .          .          .                    .           .          .                   .          .          .             else if (direction + step == config.holeposition && labs(position[(direction+1)%2]) <= config.holesize/2){ //makes sure the particle moved towards the hole and that it can get out
          .          .          .                    .           .          .                   .          .          .               Cells[moved_particle_cell] -= 1; //delete the particle from the cell count
          .          .          .                    .           .          .                   .          .          .               Particles[particle_id] = Particles[Particles.size() - 1];
          .          .          .                    .           .          .                   .          .          .               Particles.pop_back(); //delete the particle
          .          .          .                    .           .          .                   .          .          .             }
          .          .          .                    .           .          .                   .          .          .              
          2 ( 0.00%) 0          0                    0           0          0                   0          0          0           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/live/Documents/Proyecto_1/codigo_grupal/Programs/entropy.cpp
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                  D1mr       DLmr       Dw                  D1mw       DLmw       

          .          .          .                   .          .          .                   .          .          .           #include "header.h"
          .          .          .                   .          .          .                   .          .          .           
          .          .          .                   .          .          .                   .          .          .           double entropy(const CONFIG &config, const Vec_i &Cells)
  1,200,006 ( 0.01%) 1 ( 0.02%) 1 ( 0.05%)          0          0          0             600,003 ( 0.07%) 0          0           {
    200,001 ( 0.00%) 0          0                   0          0          0                   0          0          0             double s=0, Entropy=0;
          .          .          .                   .          .          .                   .          .          .             
          .          .          .                   .          .          .                   .          .          .             Entropy=std::log(config.nmolecules);
          .          .          .                   .          .          .                   .          .          .             
 61,929,549 ( 0.74%) 1 ( 0.02%) 1 ( 0.05%) 20,400,102 ( 1.14%) 4 ( 0.02%) 0                   0          0          0             for(auto i: Cells){
190,967,040 ( 2.29%) 1 ( 0.02%) 1 ( 0.05%) 37,741,710 ( 2.10%) 0          0          18,870,855 ( 2.21%) 0          0               if(i != 0) {s += i*std::log(i);}
          .          .          .                   .          .          .                   .          .          .             }
  1,000,005 ( 0.01%) 0          0             400,002 ( 0.02%) 0          0                   0          0          0             Entropy -= s/(1.0*config.nmolecules);
          .          .          .                   .          .          .                   .          .          .           
          .          .          .                   .          .          .                   .          .          .             return Entropy;      
  1,000,007 ( 0.01%) 0          0             800,004 ( 0.04%) 0          0                   0          0          0           }

--------------------------------------------------------------------------------
Ir                     I1mr         ILmr        Dr                     D1mr         DLmr       Dw                   D1mw        DLmw       
--------------------------------------------------------------------------------
6,822,823,406 (81.77%) 436 ( 7.37%) 33 ( 1.61%) 1,418,752,868 (78.95%) 111 ( 0.68%) 0          758,213,375 (88.82%) 83 ( 1.09%) 4 ( 0.22%)  events annotated

